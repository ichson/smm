const fetch = require('node-fetch');
const { TypeError, Error } = require('../error.js');
const EmbedBuilder = require('../classes/Builders/EmbedBuilder');
const ButtonBuilder = require('../classes/Builders/ButtonBuilder');
const SelectMenuBuilder = require('../classes/Builders/SelectMenuBuilder');
const ActionRowBuilder = require('../classes/Builders/ActionRowBuilder');

module.exports = async(webhook, options, info) => {

    if(!options) throw new TypeError('EMPTY_MESSAGE', 'Cannot send an empty message.');
    if(!options.content && !options.embeds && !options.files) throw new TypeError('EMPTY_MESSAGE', 'Cannot send an empty message.');

    if(options.embeds) {
        if(!Array.isArray(options.embeds)) throw new TypeError('INVALID_ARRAY', 'An invalid Array of embeds has been provided.');
        if(options.embeds.length < 0 || options.embeds.length > 10) throw new TypeError('INVALID_ARRAY', 'Provided array is lower than 0 or higher than 10.');

        for(let i = 0; i < options.embeds.length; i++) {
            if(!(options.embeds[i] instanceof EmbedBuilder)) throw new TypeError('INVALID_EMBED_BUILDER', 'An invalid EmbedBuilder has been provided.');
            options.embeds[i] = options.embeds[i].toJSON();
        };
    };

    if(options.components) {
        if(!Array.isArray(options.components)) throw new TypeError('INVALID_ARRAY', 'An invalid Array of components has been provided.');
        if(options.components.length < 0 || options.embeds.length > 5) throw new TypeError('INVALID_ARRAY', 'Provided array is lower than 0 or higher than 5.');

        for(let i = 0; i < options.components.length; i++) {
            if(!(options.components[i] instanceof ActionRowBuilder)) throw new InvalidBuilder('INVALID_ACTIONROW_BUILDER', 'An invalid ActionRowBuilder has been provided.');
            options.components[i] = options.components[i].toJSON();

            if(!Array.isArray(options.components[i].components)) throw new TypeError('EMPTY_ROW', 'The provided ActionRow\'s components are empty');
            if(options.components.length < 0 || options.embeds.length > 5) throw new TypeError(`The provided ActionRowBuilder's components length is lower than 0 or higher than 5.`);
            
            for(let y = 0; y < options.components[i].components.length; y++) {
                if(!(options.components[i].components[y] instanceof ButtonBuilder) && !(options.components[i].components[y] instanceof SelectMenuBuilder)) throw new InvalidBuilder(`An invalid ButtonBuilder/SelectMenuBuilder has been provided in the ActionRowBuilder.`);
                options.components[i].components[y] = options.components[i].components[y].toJSON();
            };
        };
    };

    const body = {
        content: options.content,
        username: info ? info.username ? info.username : undefined : undefined,
        avatar_url: info ? info.avatar ? info.avatar : undefined : undefined,
        tts: options.tts,
        file: options.files,
        embeds: options.embeds,
        payload_json: options.payload_json,
        allowed_mentions: options.allowed_mentions ? options.allowed_mentions : undefined,
        components: options.components,
    };
    const response = await fetch(`https://discord.com/api/v9/webhooks/${(await webhook).id}/${(await webhook).token}?wait=true`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
    })
    .catch(err => {
        throw new Error('UNEXPECTED_ERROR', err.message);
    });

    return (await response.json());

};